const Util = require("./util");
const fs = require("fs");
const ModelsTemplate = require("./templates/module/main/domain/models/models.template");
const EntitiesTemplate = require("./templates/module/main/domain/entities/entities.template");
const UsecaseTemplate = require("./templates/module/main/usecase/usecase.template");
const IServiceTemplate = require("module_creator/templates/module/main/protocols/i_service.template");
const IUseCaseTemplate = require("./templates/module/main/interface/i_usecase.template");
const ServiceTemplateX = require("./templates/module/adapter/service/service.template");
const IDatasourceTemplate = require("module_creator/templates/module/adapter/protocols/i_datasources.template");
const DatasourcesTemplate = require("./templates/module/infra/datasources/datasouce.template");

const modelsTemplate = new ModelsTemplate();
const entitiesTemplate = new EntitiesTemplate();
const usecaseTemplate = new UsecaseTemplate();
const iserviceTemplate = new IServiceTemplate();
const iusecaseTemplate = new IUseCaseTemplate();
const serviceTemplete = new ServiceTemplateX();
const idatasourceTemplate = new IDatasourceTemplate();
const datasourceTemplate = new DatasourcesTemplate();

class ModuleGenerator {
  constructor() {
    this.util = new Util();
  }

  // MAIN CONFIG
  mainConfig(local, moduleNameSC, moduleNamePC, modelsNameSC, modelsNamePC) {
    this.mainDomainConfig(local, modelsNameSC, modelsNamePC);
    this.mainInterfaceConfig(local, moduleNameSC, moduleNamePC);
    this.mainUsecaseConfig(local, moduleNameSC, moduleNamePC);
  }
  // DOMAIN CONFIG
  mainDomainConfig(local, modelsNameSC, modelsNamePC) {
    this.domainEntitiesConfig(local, modelsNameSC, modelsNamePC);
    this.domainModelsConfig(local, modelsNameSC, modelsNamePC);
  }
  // ENTITIES CONFIG
  domainEntitiesConfig(local, modelsNameSC, modelsNamePC) {

    for (let i = 0; i < modelsNameSC.length; i++) {
      const modelNameSC = modelsNameSC[i];
      const modelNamePC = modelsNamePC[i];
      fs.writeFileSync(
        entitiesTemplate.getEntitiesLocal(local._entities, modelNameSC),
        entitiesTemplate.getEntitiesTemplate(modelNamePC)
      );
    }
  }
  // MODEL CONFIG
  domainModelsConfig(local, modelsNameSC, modelsNamePC) {
    for (let i = 0; i < modelsNameSC.length; i++) {
      const modelNameSC = modelsNameSC[i];
      const modelNamePC = modelsNamePC[i];
      fs.writeFileSync(
        modelsTemplate.getModelsLocal(local._models, modelNameSC),
        modelsTemplate.getModelsTemplate(modelNamePC, modelNameSC)
      );
    }
  }
  // INTERFACE CONFIG
  mainInterfaceConfig(local, moduleNameSC, moduleNamePC) {
    fs.writeFileSync(
      iusecaseTemplate.iUsecaseLocal(local._interface, moduleNameSC),
      iusecaseTemplate.iUseTemplate(moduleNamePC)
    );

    fs.writeFileSync(
      iserviceTemplate.iServiceName(local._mainProtocol, moduleNameSC),
      iserviceTemplate.iServiceTemplate(moduleNamePC)
    );
  }
  // USECASE CONFIG
  mainUsecaseConfig(local, moduleNameSC, moduleNamePC) {
    fs.writeFileSync(
      usecaseTemplate.usecaseLocal(local._usecase, moduleNameSC),
      usecaseTemplate.usecaseTemplate(moduleNameSC, moduleNamePC)
    );
  }
  // ADAPTER CONFIG
  adapterConfig(local, moduleNameSC, moduleNamePC) {
    this.adapterInterfaceConfig(local, moduleNameSC, moduleNamePC);
    this.adapterServiceConfig(local, moduleNameSC, moduleNamePC);
  }
  //  INTERFACE CONFIG
  adapterInterfaceConfig(local, moduleNameSC, moduleNamePC) {
    fs.writeFileSync(
      idatasourceTemplate.datasourceName(local._adapterProtocol, moduleNameSC),
      idatasourceTemplate.datasourceTemplate(moduleNamePC)
    );
  }
  // SERVICE CONFIG
  adapterServiceConfig(local, moduleNameSC, moduleNamePC) {
    fs.writeFileSync(
      serviceTemplete.serviceName(local._adapterService, moduleNameSC),
      serviceTemplete.serviceTemplate(moduleNameSC, moduleNamePC)
    );
  }

  infraConfig(local, moduleNameSC, moduleNamePC) {
    this.infraDatasourceConfig(local, moduleNameSC, moduleNamePC);
    this.infraErrorsConfig(local, moduleNameSC, moduleNamePC);
  }
  infraDatasourceConfig(local, moduleNameSC, moduleNamePC) {
    fs.writeFileSync(
      datasourceTemplate.datasourcesLocal(local._datasource, moduleNameSC),
      datasourceTemplate.datasourcesTemplate(moduleNameSC, moduleNamePC)
    );
  }
  infraErrorsConfig(local, moduleNameSC, moduleNamePC) {
    // FAZ NADA AQUI
  }
}

module.exports = ModuleGenerator;
