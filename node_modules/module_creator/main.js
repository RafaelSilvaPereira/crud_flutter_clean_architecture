const { exec } = require("child_process");
const fs = require("fs");
const path = require("path");
const Util = require("./util");
const ModuleGenerator = require("./module_generator");
const moduleGenerator = new ModuleGenerator();

const AdapterIndex = require("./templates/module/adapter/local");
const ProtocolIndex = require("module_creator/templates/module/adapter/protocols/local");
const ServiceIndex = require("./templates/module/adapter/service/local");
const IDatasourceTemplate = require("module_creator/templates/module/adapter/protocols/i_datasources.template");
const ServiceTemplate = require("./templates/module/adapter/service/service.template");
const InfraIndex = require("./templates/module/infra/local");
const DataSourceIndex = require("./templates/module/infra/datasources/local");
const ErrorIndex = require("./templates/module/infra/errors/local");
const ModuleIndex = require("./templates/module/local");
const MainIndex = require("./templates/module/main/local");
const DomainIndex = require("./templates/module/main/domain/local");
const EntitiesIndex = require("./templates/module/main/domain/entities/local");
const ModelIndex = require("./templates/module/main/domain/models/local");
const UsecaseIndex = require("./templates/module/main/usecase/local");
const MainInterfaceIndex = require("./templates/module/main/interface/local");

// INDEX's
// Module
const moduleIndex = new ModuleIndex();
//Adapter
const adapterIndex = new AdapterIndex();
const adapterProtocolsIndex = new ProtocolIndex();
const adapterServicesIndex = new ServiceIndex();
// Infra
const infraIndex = new InfraIndex();
const infraDatasourcesIndex = new DataSourceIndex();
const infraErrorsIndex = new ErrorIndex();
// Main
const mainIndex = new MainIndex();
// Domain
const mainDomainIndex = new DomainIndex();
// Entities
const domainEntitiesIndex = new EntitiesIndex();
// Models
const domainModelsIndex = new ModelIndex();
// Interfaces
const mainInterfacesIndex = new MainInterfaceIndex();
// Usecases =
const mainUsecasesIndex = new UsecaseIndex();
// TEMPLATE's
const idatasourceTemplate = new IDatasourceTemplate();
const serviceTemplate = new ServiceTemplate();

const util = new Util();

if (process.argv.includes("-HELP")) {
  console.log(
    "Usage: " + `module_creator -L="$LOCAL" -M="$MODULE_NAME" -E="$ENTITY_NAME"`
  );
} else {
  const data = process.argv.splice(2, 6);

  newModule(data);
}

/**
 *
 * @param {ModuleGenerator} moduleGenerator
 * @param {} local
 * @param {*} moduleNameSC
 * @param {*} moduleNamePC
 * @param {*} modelsNameSC
 * @param {*} modelsNamePC
 */

const validCommands = {
  newM: "=nm",
  help: "=help",
};

function testNames(path, fileName) {
  return `${path}/${fileName}_test.dart`;
}

function newModule(data) {
  const createClasses = (
    moduleGenerator,
    local,
    moduleNameSC,
    moduleNamePC,
    modelsNameSC,
    modelsNamePC
  ) => {
    moduleGenerator.mainConfig(
      local,
      moduleNameSC,
      moduleNamePC,
      modelsNameSC,
      modelsNamePC
    );
    moduleGenerator.infraConfig(local, moduleNameSC, moduleNamePC);
    moduleGenerator.adapterConfig(local, moduleNameSC, moduleNamePC);
  };
  let rootLocal;
  let moduleName;
  let modelsNames;
  while (!rootLocal || (!moduleName && !modelsNames)) {
    for (const d of data) {
      const symbols = d.split("=");
      const flag = symbols[0].replace("-", "");
      const value = symbols[1];
      if (flag === "L") rootLocal = value;
      if (flag === "M") moduleName = value;
      if (flag === "E") modelsNames = value;
    }
  }

  if (!!rootLocal && !!moduleName) {
    if (!!modelsNames) {
      const moduleNameSC = util.toSnakeCase(moduleName);
      const moduleNamePC = util.toPascalCase(moduleName);
      const modelsNameSC = modelsNames
        .split(",")
        .map((modelName) => util.toSnakeCase(modelName));
      const modelsNamePC = modelsNames
        .split(",")
        .map((modelName) => util.toPascalCase(modelName));

      const locals = {
        _module: `${rootLocal}/lib/modules/${moduleNameSC}`,
        _adapter: `${rootLocal}/lib/modules/${moduleNameSC}/adapter`,
        _adapterProtocol: `${rootLocal}/lib/modules/${moduleNameSC}/adapter/protocols`,
        _adapterService: `${rootLocal}/lib/modules/${moduleNameSC}/adapter/services`,
        _infra: `${rootLocal}/lib/modules/${moduleNameSC}/infra`,
        _datasource: `${rootLocal}/lib/modules/${moduleNameSC}/infra/datasources`,
        _error: `${rootLocal}/lib/modules/${moduleNameSC}/infra/errors`,
        _main: `${rootLocal}/lib/modules/${moduleNameSC}/main`,
        _domain: `${rootLocal}/lib/modules/${moduleNameSC}/main/domain`,
        _entities: `${rootLocal}/lib/modules/${moduleNameSC}/main/domain/entities`,
        _models: `${rootLocal}/lib/modules/${moduleNameSC}/main/domain/models`,
        _interface: `${rootLocal}/lib/modules/${moduleNameSC}/main/interfaces`,
        _mainProtocol : `${rootLocal}/lib/modules/${moduleNameSC}/main/protocols`,
        _usecase: `${rootLocal}/lib/modules/${moduleNameSC}/main/usecases`,
        _validators: `${rootLocal}/lib/modules/${moduleNameSC}/validators`,
      };

      const test_locals = {
        _module: `${rootLocal}/test/modules/${moduleNameSC}`,
        _adapter: `${rootLocal}/test/modules/${moduleNameSC}/adapter`,
        _adapterProtocol: `${rootLocal}/test/modules/${moduleNameSC}/adapter/protocols`,
        _adapterService: `${rootLocal}/test/modules/${moduleNameSC}/adapter/services`,
        _infra: `${rootLocal}/test/modules/${moduleNameSC}/infra`,
        _datasource: `${rootLocal}/test/modules/${moduleNameSC}/infra/datasources`,
        _error: `${rootLocal}/test/modules/${moduleNameSC}/infra/errors`,
        _main: `${rootLocal}/test/modules/${moduleNameSC}/main`,
        _domain: `${rootLocal}/test/modules/${moduleNameSC}/main/domain`,
        _entities: `${rootLocal}/test/modules/${moduleNameSC}/main/domain/entities`,
        _models: `${rootLocal}/test/modules/${moduleNameSC}/main/domain/models`,
        _interface: `${rootLocal}/test/modules/${moduleNameSC}/main/interfaces`,
        _usecase: `${rootLocal}/test/modules/${moduleNameSC}/main/usecases`,
        _mainProtocol : `${rootLocal}/test/modules/${moduleNameSC}/main/protocols`,
        _validators: `${rootLocal}/test/modules/${moduleNameSC}/validators`,
      };

      // Create Module Folder, and module index.dart                      {*}
      fs.mkdirSync(locals._module);
      fs.writeFileSync(
        moduleIndex.moduleIndexName(locals._module),
        moduleIndex.moduleIndexTemplate
      );

      // Create Adapter Folder inside Module, and adapter index.dart      {**}
      fs.mkdirSync(locals._adapter);
      fs.writeFileSync(
        adapterIndex.adapterLocal(locals._adapter),
        adapterIndex.adapterTemplate
      );


      
      
      // Create Interface Folder inside Adapter, and interface index.dart {***}
      fs.mkdirSync(locals._adapterProtocol);
      console.log(locals._adapterProtocol);
      fs.writeFileSync(
        adapterProtocolsIndex.indexLocal(locals._adapterProtocol),
        ""
      );
      // Create Interface Folder inside Adapter, and interface index.dart {***}
      fs.mkdirSync(locals._adapterService);
      fs.writeFileSync(adapterServicesIndex.local(locals._adapterService), "");

      // Create Infra folder inside Module, and infra index.dart          {**}
      fs.mkdirSync(locals._infra);
      fs.writeFileSync(
        infraIndex.infraIndexLocal(locals._infra),
        infraIndex.infraIndexTemplate
      );

      // Create Datasource folder inside Infra, and datasource index.dart {***}
      fs.mkdirSync(locals._datasource);
      fs.writeFileSync(
        infraDatasourcesIndex.getDataSourceIndex(locals._datasource),
        ""
      );

      // Create Errors folder inside Infra, and errors index.dart         {***}
      fs.mkdirSync(locals._error);
      fs.writeFileSync(infraErrorsIndex.errorsLocalName(locals._error), "");

      // Create Main folder inside Module, and main index.dart            {**}
      fs.mkdirSync(locals._main);
      fs.writeFileSync(
        mainIndex.mainIndexLocal(locals._main),
        mainIndex.mainIndexTemplate
      );

      // Create Protocol Folder inside Main
      fs.mkdirSync(locals._mainProtocol);
      fs.writeFileSync(
        `${locals._mainProtocol}/index.dart`,
        ``
      );

      // Create Domain folder inside Main, and domain index.dart          {***}
      fs.mkdirSync(locals._domain);
      fs.writeFileSync(
        mainDomainIndex.domainLocalName(locals._domain),
        mainDomainIndex.domainLocalTemplate
      );
      
      // Create Entities folder inside Domain, and entities index.dart    {****}
      fs.mkdirSync(locals._entities);
      fs.writeFileSync(
        domainEntitiesIndex.entitiesLocalName(locals._entities),
        ""
      );

      // Create Models folder inside Domain, and models index.dart        {****}
      fs.mkdirSync(locals._models);
      fs.writeFileSync(domainModelsIndex.modelsLocalName(locals._models), "");

      // Create Interface folder inside Main, and interface index.dart    {***}
      fs.mkdirSync(locals._interface);
      fs.writeFileSync(
        mainInterfacesIndex.getInterfaceIndexLocal(locals._interface),
        ""
      );

      // Create Usecases folder inside Main, and usecases index.dart      {***}
      fs.mkdirSync(locals._usecase);
      fs.writeFileSync(
        mainUsecasesIndex.getUsecaseIndexLocal(locals._usecase),
        ""
      );

      fs.mkdirSync(locals._validators);
      fs.writeFileSync(`${locals._validators}/index.dart`, "");

      //
      // Create test folders
      //

      testStructure = `
import 'package:dartz/dartz.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/mockito.dart';

main() {
  test(
    '',
    () {
      expect(true, true);
    }
  );
}`;

      // Create Module Folder, and module index.dart                      {*}
      fs.mkdirSync(test_locals._module);
      fs.writeFileSync(
        testNames(test_locals._module, `${moduleNameSC}_module`),
        ""
      );

      // Create Adapter Folder inside Module, and adapter index.dart      {**}
      fs.mkdirSync(test_locals._adapter);
      fs.writeFileSync(
        testNames(test_locals._adapter, `${moduleNameSC}_adapter`),
        ""
      );

      // Create Interface Folder inside Adapter, and interface index.dart {***}
      fs.mkdirSync(test_locals._adapterProtocol);
      fs.writeFileSync(
        testNames(
          test_locals._adapterProtocol,
          `${moduleNameSC}_adapter_protocols`
        ),
        ""
      );
      // Create Interface Folder inside Adapter, and interface index.dart {***}
      fs.mkdirSync(test_locals._adapterService);
      fs.writeFileSync(
        testNames(
          test_locals._adapterService,
          `${moduleNameSC}_adapter_service`
        ),
        testStructure
      );

      // Create Infra folder inside Module, and infra index.dart          {**}
      fs.mkdirSync(test_locals._infra);
      fs.writeFileSync(
        testNames(test_locals._infra, `${moduleNameSC}_infra`),
        ""
      );

      // Create Datasource folder inside Infra, and datasource index.dart {***}
      fs.mkdirSync(test_locals._datasource);
      fs.writeFileSync(
        testNames(test_locals._datasource, `${moduleNameSC}_datasource`),
        ""
      );

      // Create Errors folder inside Infra, and errors index.dart         {***}
      fs.mkdirSync(test_locals._error);
      fs.writeFileSync(
        testNames(test_locals._error, `${moduleNameSC}_error`),
        ""
      );

      // Create Main folder inside Module, and main index.dart            {**}
      fs.mkdirSync(test_locals._main);
      fs.writeFileSync(
        testNames(test_locals._main, `${moduleNameSC}_main`),
        ""
      );

      // Create Domain folder inside Main, and domain index.dart          {***}
      fs.mkdirSync(test_locals._domain);
      fs.writeFileSync(
        testNames(test_locals._domain, `${moduleNameSC}_domain`),
        ""
      );

      // Create Entities folder inside Domain, and entities index.dart    {****}
      fs.mkdirSync(test_locals._entities);
      fs.writeFileSync(
        testNames(test_locals._entities, `${moduleNameSC}_entities`),
        ""
      );

      // Create Models folder inside Domain, and models index.dart        {****}
      fs.mkdirSync(test_locals._models);
      fs.writeFileSync(
        testNames(test_locals._models, `${moduleNameSC}_models`),
        ""
      );

      // Create Interface folder inside Main, and interface index.dart    {***}
      fs.mkdirSync(test_locals._interface);
      fs.writeFileSync(
        testNames(test_locals._interface, `${moduleNameSC}_interface`),
        ""
      );

      // Create Usecases folder inside Main, and usecases index.dart      {***}
      fs.mkdirSync(test_locals._usecase);
      fs.writeFileSync(
        testNames(test_locals._usecase, `${moduleNameSC}_usecase`),
        testStructure
      );

      createClasses(
        moduleGenerator,
        locals,
        moduleNameSC,
        moduleNamePC,
        modelsNameSC,
        modelsNamePC
      );

      exec(
        `git commit -m 'feat: create scaffold of module ${moduleNamePC}'`,
        (a, b, c) => {}
      );
    }
  }
}
